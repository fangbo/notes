

Raft is a consensus algorithm for managing a replicated log.  It produces a
result equivalent to (multi-)Paxos, and it is as efficient as Paxos. Raft is
more understandable than Paxos and provides a better foundation for building
practical systems.

Raft seperates the key elements of consensus, such as leader election, log
replication, and safety, and it enforces a stronger degree of coherency to
reduce the number of state that must be considered.


# Novel Features

    * Strong leader

    A stronger form of leadership than other consensus algorithms is used in Raft.
    For example,  log entries only flow from the leader to other servers.

    * Leader election

    Raft uses a randomized timers to select leaders. This add only a small amount of
    mechanism to the heartbeats already required for any consensus algorithm, while
    resolving conflicts simply and rapidly.

    * Membership changes

    Raft uses a new *joint consensus* approach for changing the set of servers in
    the cluster. This allows the cluster to continue operating normally during
    configuration changes.


# Replicated state machines

Consensus algorithms typically arise in the context of replicated state
machine.  State machines on a collection of servers compute identical copies of
the same state and can continue operating even if some of the servers are down.
The consensus alogrithm manages a replicated log containing state machine
commands from clients. The state machines process identical sequences of
commands from the logs, so they produce the same outputs.

    * The ensure safety under all non-Byzantine conditions, including network
      delays, partitions, and package loss, duplication and reordering.

    * They are fully available as long as any majority of the servers are
      operational and can comminuate with each other and with clients.

    * They do not depend on timing to ensure the consistency of the logs:
      faulty clocks and extreme message delays can, at worst, cause availability
      problems.

    * A command can complete as soon as a majority of the cluster has repsond
      to a single round of remote procedure calls; a minority of slow servers
      need not impact overall system performance.


# Paxos's Drawbacks

    * Paxos is exceptionally difficult to understand.

    * Paxos does not provide a good foundation for building practical
      implementations.

It is simpler and more efficent to build a system around a log, where new
entries are appended sequentially in a constrained order.


# Understandability Approaches.

Raft divedes problems into seperate pieces that could be solved, explained, and
understood relatively independently. For example: leader selection, log
replication, safety and membership changes.

Another approach way is to simplify the state space by reducing the number of
states to consider, making the system more coherent and eliminating
nondeterminism where possible. Log are not allowed to have holes and Raft
limits the ways in which logs can become incosistent with each other. Raft uses
randomization to simplify the leader election algorithm.


# Basic of Raft Consensus Algorithm

Leader

    Leader has complete responsibility for managing the replicated log.

    Leader accepts log entries from clients, repliates them on other servers,
    tell servers when it is safe to apply log entries to their state machines.

    Leader simplifies the management of replicated log.


Three Relatively Independent Subprolems

    Leader election

    Log replication

    Safety: if any server has applied a particular log entry into its state
    machine, then no other server may apply a different command for the same
    log index.


Server Role

    * LEADER

    Raft ensures that there is at most one leader in a given time.

    * FOLLOWER

    * CANDIDATE


Terms

    Raft divides time into terms of arbitrary length and each term begins
    with an election. A single leader manages the cluster until the end
    oif the term.

    Terms act as a logical clock.

    Current terms are exchanged whenever servers communicate. Server updates its
    current term to a larger one if its current term is smaller than the other's


RPC Interface

    * RequestVote

    These RPCs are initiated by candidatess during elections.

    * AppendEntries

    They are initiated by leaders to replicate log entries and to privide
    a form of heartbeat.

    Servers issue RPCs in paranell for best performance.


# Lead Election

Raft uses a hearbeat mechnism to trigger leader election.


    * When server starts up, it is a follower

                timeout,
                new election
    Follower   --------------->  Candidate


    * A candidate remains if it is timeout and new election is launched

                timeout,
                new election
    Candidate  --------------->  Candidate


    * A candiate becomes a leader if it receives votes from majority of servers

                receives votes from
                majority of servers
    Candidate  --------------->  Leader


    * A candidate becomes a follower if it discovers current leader or new term

                discovers current leader
                or new term
    Candidate  --------------->  Follower


    * A leader becomes a follower if it discovers server with higher term

                discovers server
                with higher term
    Leader     --------------->  Follower


RequestVote RPC

    ARGUMENTS:

    term            candidate'sterm
    candidateId     candidate requesting vote
    lastLogIndex    index of candidate's last log entry
    lastLogTerm     term of candidate's last log entry

    OUTPUT:

    term            currentTerm, for candidate to update itself
    voteGranted     true means candidate recevied vote

    RULES:

    * Reply false if term < currentTerm

    * If votedFor is null or candidateId, and candidate's log is at least
      as up-to-date as receiver's log, grant vote.



